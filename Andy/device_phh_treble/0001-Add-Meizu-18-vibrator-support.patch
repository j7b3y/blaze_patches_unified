From d59a9afa104dcbf94769b42237c2b06e1709333c Mon Sep 17 00:00:00 2001
From: j7b3y <Glowing3386@proton.me>
Date: Wed, 17 Aug 2022 10:18:10 +0900
Subject: [PATCH 1/3] Add Meizu 18 vibrator support

---
 .vscode/settings.json                         |   3 +
 base.mk                                       |   4 +
 framework_manifest.xml                        |   9 ++
 hal/meizu-vabrator/Android.bp                 |  31 ++++
 hal/meizu-vabrator/Vibrator.cpp               | 140 ++++++++++++++++++
 ...oid.hardware.vibrator@1.3-service.meizu.rc |   4 +
 hal/meizu-vabrator/service.cpp                |  72 +++++++++
 sepolicy/file_contexts                        |   1 +
 sepolicy/hal.te                               |  11 ++
 9 files changed, 275 insertions(+)
 create mode 100644 .vscode/settings.json
 create mode 100644 hal/meizu-vabrator/Android.bp
 create mode 100644 hal/meizu-vabrator/Vibrator.cpp
 create mode 100644 hal/meizu-vabrator/android.hardware.vibrator@1.3-service.meizu.rc
 create mode 100644 hal/meizu-vabrator/service.cpp

diff --git a/.vscode/settings.json b/.vscode/settings.json
new file mode 100644
index 0000000..691a8f6
--- /dev/null
+++ b/.vscode/settings.json
@@ -0,0 +1,3 @@
+{
+    "C_Cpp.errorSquiggles": "Disabled"
+}
\ No newline at end of file
diff --git a/base.mk b/base.mk
index e3fa84c..29fbe5c 100644
--- a/base.mk
+++ b/base.mk
@@ -229,6 +229,10 @@ PRODUCT_COPY_FILES += \
 	frameworks/av/services/audiopolicy/config/a2dp_audio_policy_configuration_7_0.xml:system/etc/a2dp_audio_policy_configuration_7_0.xml \
 	frameworks/av/services/audiopolicy/config/a2dp_audio_policy_configuration.xml:system/etc/a2dp_audio_policy_configuration.xml \
 
+PRODUCT_PACKAGES += \
+	android.hardware.vibrator@1.3-service.meizu
+
+
 include build/make/target/product/gsi_release.mk
 
 # Protect deskclock from power save
diff --git a/framework_manifest.xml b/framework_manifest.xml
index cb37b49..1cda019 100644
--- a/framework_manifest.xml
+++ b/framework_manifest.xml
@@ -19,5 +19,14 @@
             <instance>default</instance>
         </interface>
     </hal>
+    <hal>
+        <name>android.hardware.vibrator</name>
+        <transport>hwbinder</transport>
+        <version>1.3</version>
+        <interface>
+            <name>IVibrator</name>
+            <instance>default</instance>
+        </interface>
+    </hal>
 </manifest>
 
diff --git a/hal/meizu-vabrator/Android.bp b/hal/meizu-vabrator/Android.bp
new file mode 100644
index 0000000..3ac4ca8
--- /dev/null
+++ b/hal/meizu-vabrator/Android.bp
@@ -0,0 +1,31 @@
+//
+// Copyright (C) 2017 The Android Open Source Project
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+cc_binary {
+    name: "android.hardware.vibrator@1.3-service.meizu",
+    relative_install_path: "hw",
+    init_rc: ["android.hardware.vibrator@1.3-service.meizu.rc"],
+    srcs: ["service.cpp", "Vibrator.cpp"],
+    cflags: ["-Wall", "-Werror"],
+    shared_libs: [
+        "libhidlbase",
+        "liblog",
+        "libutils",
+        "libhardware",
+        "android.hardware.vibrator@1.0",
+        "android.hardware.vibrator@1.1",
+        "android.hardware.vibrator@1.2",
+        "android.hardware.vibrator@1.3",
+    ],
+}
\ No newline at end of file
diff --git a/hal/meizu-vabrator/Vibrator.cpp b/hal/meizu-vabrator/Vibrator.cpp
new file mode 100644
index 0000000..3bca5c1
--- /dev/null
+++ b/hal/meizu-vabrator/Vibrator.cpp
@@ -0,0 +1,140 @@
+/*
+ * Copyright (C) 2017 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#define LOG_TAG "VibratorService"
+
+#include <log/log.h>
+
+#include <hardware/hardware.h>
+#include <hardware/vibrator.h>
+
+#include "Vibrator.h"
+
+#include <cinttypes>
+#include <cmath>
+#include <iostream>
+#include <fstream>
+#include <thread>
+#include <unistd.h>
+
+namespace android {
+namespace hardware {
+namespace vibrator {
+namespace V1_3 {
+namespace implementation {
+
+Vibrator::Vibrator(std::ofstream&& timeoutAndAmplitude, std::ofstream&& waveNumber, std::ofstream&& effectTrigger) :
+        mTimeoutAndAmplitude(std::move(timeoutAndAmplitude)),
+        mWaveNumber(std::move(waveNumber)),
+        mEffectTrigger(std::move(effectTrigger)) {}
+
+Return<Status> Vibrator::on(uint32_t timeout_ms) {
+    // Wave number 12 for vibrations slightly stronger than stock (13)
+    mWaveNumber << 12 << std::endl;
+    mTimeoutAndAmplitude << timeout_ms << std::endl;
+    if (!mTimeoutAndAmplitude) {
+        ALOGE("Failed to turn vibrator on (%d): %s", errno, strerror(errno));
+        return Status::UNKNOWN_ERROR;
+    }
+    return Status::OK;
+}
+
+Return<Status> Vibrator::off()  {
+    mTimeoutAndAmplitude << 0 << std::endl;
+    if (!mTimeoutAndAmplitude) {
+        ALOGE("Failed to turn vibrator off (%d): %s", errno, strerror(errno));
+        return Status::UNKNOWN_ERROR;
+    }
+    return Status::OK;
+}
+
+Return<bool> Vibrator::supportsAmplitudeControl()  {
+    return false;
+}
+
+Return<Status> Vibrator::setAmplitude(uint8_t) {
+    return Status::UNSUPPORTED_OPERATION;
+}
+
+Return<void> Vibrator::perform(V1_0::Effect effect, EffectStrength strength, perform_cb _hidl_cb) {
+    return perform<decltype(effect)>(effect, strength, _hidl_cb);
+}
+
+Return<void> Vibrator::perform_1_1(V1_1::Effect_1_1 effect, EffectStrength strength, perform_cb _hidl_cb) {
+    return perform<decltype(effect)>(effect, strength, _hidl_cb);
+}
+
+Return<void> Vibrator::perform_1_2(V1_2::Effect effect, EffectStrength strength, perform_cb _hidl_cb) {
+    return perform<decltype(effect)>(effect, strength, _hidl_cb);
+}
+
+Return<void> Vibrator::perform_1_3(Effect effect, EffectStrength strength, perform_cb _hidl_cb) {
+    return perform<decltype(effect)>(effect, strength, _hidl_cb);
+}
+
+Return<bool> Vibrator::supportsExternalControl() {
+    return false;
+}
+
+Return<Status> Vibrator::setExternalControl(bool) {
+    return Status::UNSUPPORTED_OPERATION;
+}
+
+Return<void> Vibrator::perform(Effect effect, EffectStrength, perform_cb _hidl_cb) {
+    uint32_t id;
+    switch (effect) {
+        case Effect::CLICK:
+            id = 31008;
+            break;
+        case Effect::DOUBLE_CLICK:
+            id = 31003;
+            break;
+        case Effect::TICK:
+        case Effect::TEXTURE_TICK:
+            id = 21000;
+            break;
+        case Effect::THUD:
+            id = 30900;
+            break;
+        case Effect::POP:
+            id = 22520;
+            break;
+        case Effect::HEAVY_CLICK:
+            id = 30900;
+            break;
+        default:
+            _hidl_cb(Status::UNSUPPORTED_OPERATION, 0);
+            return Void();
+    }
+    mEffectTrigger << id << std::endl;
+    _hidl_cb(Status::OK, 200);
+    return Void();
+}
+
+template <typename T> Return<void> Vibrator::perform(T effect, EffectStrength strength, perform_cb _hidl_cb) {
+    auto validRange = hidl_enum_range<T>();
+    if (effect < *validRange.begin() || effect > *std::prev(validRange.end())) {
+        _hidl_cb(Status::UNSUPPORTED_OPERATION, 0);
+        return Void();
+    }
+    return perform(static_cast<Effect>(effect), strength, _hidl_cb);
+}
+
+}  // namespace implementation
+}  // namespace V1_3
+}  // namespace vibrator
+}  // namespace hardware
+}  // namespace android
\ No newline at end of file
diff --git a/hal/meizu-vabrator/android.hardware.vibrator@1.3-service.meizu.rc b/hal/meizu-vabrator/android.hardware.vibrator@1.3-service.meizu.rc
new file mode 100644
index 0000000..a23a1ab
--- /dev/null
+++ b/hal/meizu-vabrator/android.hardware.vibrator@1.3-service.meizu.rc
@@ -0,0 +1,4 @@
+service vibrator.meizu /system/bin/hw/android.hardware.vibrator@1.3-service.meizu
+    class late_start
+    user system
+    group system
\ No newline at end of file
diff --git a/hal/meizu-vabrator/service.cpp b/hal/meizu-vabrator/service.cpp
new file mode 100644
index 0000000..c7760f0
--- /dev/null
+++ b/hal/meizu-vabrator/service.cpp
@@ -0,0 +1,72 @@
+/*
+ * Copyright (C) 2017 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+#define LOG_TAG "android.hardware.vibrator@1.3-service.meizu"
+
+#include <android/hardware/vibrator/1.3/IVibrator.h>
+#include <hidl/HidlSupport.h>
+#include <hidl/HidlTransportSupport.h>
+#include <utils/Errors.h>
+#include <utils/StrongPointer.h>
+
+#include "Vibrator.h"
+
+using android::hardware::configureRpcThreadpool;
+using android::hardware::joinRpcThreadpool;
+using android::hardware::vibrator::V1_3::IVibrator;
+using android::hardware::vibrator::V1_3::implementation::Vibrator;
+using namespace android;
+
+static const char *CONTROL_PATH_TIMEOUT = "/sys/class/timed_output/vibrator/enable";
+static const char *PATH_WAVE_NUMBER = "/sys/class/meizu/motor/waveform";
+static const char *CONTROL_PATH_EFFECT = "/sys/class/meizu/motor/on_off";
+
+status_t registerVibratorService() {
+    std::ofstream timeoutAndAmplitude{CONTROL_PATH_TIMEOUT};
+    if (!timeoutAndAmplitude) {
+        int error = errno;
+        ALOGE("Failed to open %s (%d): %s", CONTROL_PATH_TIMEOUT, error, strerror(error));
+        return -error;
+    }
+
+    std::ofstream waveNumber{PATH_WAVE_NUMBER};
+    if (!waveNumber) {
+        int error = errno;
+        ALOGE("Failed to open %s (%d): %s", PATH_WAVE_NUMBER, error, strerror(error));
+        return -error;
+    }
+
+    std::ofstream effectTrigger{CONTROL_PATH_EFFECT};
+    if (!effectTrigger) {
+        int error = errno;
+        ALOGE("Failed to open %s (%d): %s", CONTROL_PATH_EFFECT, error, strerror(error));
+        return -error;
+    }
+
+    sp<IVibrator> vibrator = new Vibrator(std::move(timeoutAndAmplitude), std::move(waveNumber), std::move(effectTrigger));
+    (void) vibrator->registerAsService(); // suppress unused-result warning
+    return OK;
+}
+
+int main() {
+    configureRpcThreadpool(1, true);
+    status_t status = registerVibratorService();
+
+    if (status != OK) {
+        return status;
+    }
+
+    joinRpcThreadpool();
+}
\ No newline at end of file
diff --git a/sepolicy/file_contexts b/sepolicy/file_contexts
index d7c900a..1e828a1 100644
--- a/sepolicy/file_contexts
+++ b/sepolicy/file_contexts
@@ -15,6 +15,7 @@
 
 /system/bin/hw/android.hardware.biometrics.fingerprint@2.1-service.oppo.compat u:object_r:hal_fingerprint_oppo_compat_exec:s0
 /system/bin/hw/android.hardware.biometrics.fingerprint@2.1-service.oplus.compat u:object_r:hal_fingerprint_oppo_compat_exec:s0
+/system/bin/hw/android.hardware.vibrator@1.3-service.meizu u:object_r:hal_vibrator_default_exec:s0
 
 /efs u:object_r:efs_file:s0
 
diff --git a/sepolicy/hal.te b/sepolicy/hal.te
index cb44422..f1b43ae 100644
--- a/sepolicy/hal.te
+++ b/sepolicy/hal.te
@@ -8,3 +8,14 @@ init_daemon_domain(hal_fingerprint_oppo_compat)
 
 type hal_fingerprint_oppo, domain;
 allow hal_fingerprint_oppo vendor_default_prop:property_service { set };
+
+type vib_strength_sysfs, fs_type, sysfs_type;
+
+type hal_vibrator_default, domain;
+hal_server_domain(hal_vibrator_default, hal_vibrator)
+
+type hal_vibrator_default_exec, exec_type, vendor_file_type, file_type;
+init_daemon_domain(hal_vibrator_default)
+
+allow hal_vibrator_default vib_strength_sysfs:dir rw_dir_perms;
+allow hal_vibrator_default vib_strength_sysfs:file rw_file_perms;
\ No newline at end of file
-- 
2.37.1.windows.1

