From 997bd872c44b67208ecd7a25be64729d27274a89 Mon Sep 17 00:00:00 2001
From: j7b3y <Glowing3386@proton.me>
Date: Wed, 22 Feb 2023 15:54:45 +0900
Subject: [PATCH]  Try to fallback mCallingSid to getpidcon

---
 libs/binder/IPCThreadState.cpp | 22 ++++++++++++++++++++++
 1 file changed, 22 insertions(+)

diff --git a/libs/binder/IPCThreadState.cpp b/libs/binder/IPCThreadState.cpp
index 3c97dcab93..2771fe8574 100644
--- a/libs/binder/IPCThreadState.cpp
+++ b/libs/binder/IPCThreadState.cpp
@@ -35,6 +35,7 @@
 #include <sched.h>
 #include <signal.h>
 #include <stdio.h>
+#include <stdlib.h>
 #include <sys/ioctl.h>
 #include <sys/resource.h>
 #include <unistd.h>
@@ -1269,6 +1270,26 @@ status_t IPCThreadState::executeCommand(int32_t cmd)
             mCallingUid = tr.sender_euid;
             mLastTransactionBinderFlags = tr.flags;
 
+                        // This is recoding libselinux's getpidcon()
+            // We are in a NDK lib, so we need to keep changes to a minimum
+            bool allocatedSid = false;
+            if (mCallingSid == nullptr && mCallingPid != 0) {
+                char buf[4096];
+                char *path = NULL;
+                (void)asprintf(&path, "/proc/%d/attr/current", mCallingPid);
+                int fd = open(path, O_RDONLY | O_CLOEXEC);
+                if (fd != -1) {
+                    int readRet = read(fd, buf, sizeof(buf)-1);
+                    if(readRet != -1) {
+                        buf[readRet] = 0;
+                        mCallingSid = strdup(buf);
+                        allocatedSid = true;
+                    }
+                    close(fd);
+                }
+                free(path);
+            }
+
             // ALOGI(">>>> TRANSACT from pid %d sid %s uid %d\n", mCallingPid,
             //    (mCallingSid ? mCallingSid : "<N/A>"), mCallingUid);
 
@@ -1333,6 +1354,7 @@ status_t IPCThreadState::executeCommand(int32_t cmd)
 
             mServingStackPointer = origServingStackPointer;
             mCallingPid = origPid;
+            if (allocatedSid) free((void*)mCallingSid);
             mCallingSid = origSid;
             mCallingUid = origUid;
             mStrictModePolicy = origStrictModePolicy;
-- 
2.34.1

